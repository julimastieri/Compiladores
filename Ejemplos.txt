#Constantes con el primer y último valor dentro del rango.
	#Se espera que reconozca los 4 identificadores, las asignaciones, el menos y los numeros como tokens.

cte_entera_max := 32767;
cte_entera_min := -32768

cte_ulong_max:=4294967295
cte_ulong_min:=0

#Constantes con el primer y último valor fuera del rango.
	#Se espera que reconozca el 32800 y el 40000 como ulong. El 4400000000 tambien como ulong reemplazandolo por el maximo
	# el 2 como constante entera y el menos como token.

32800 #constante fuera de rango
-40000 #cte fuera de rango

4400000000 
-2

#Identificadores de menos y más de 25 caracteres.
#Identificadores con letras, dígitos y "_".
	#Se espera que trunque el primer identificador hasta el caracter 25 y genere un warning avisando.

identificador_Mas_De_25_caracteres

identificadorCorto

#Identificadores que empiecen "_".
	#Se espera que genere un error por el _ y que reconozca variable como token

_variable

#Palabras reservadas escritas en minúsculas y mayúsculas.
	#Se espera que las escritas en minúsculas se reconozcan como palabras reservadas
	# y las escritas con mayúsculas como identificadores


if 
else
end_if
print
int
begin, end
foreach
in 
ulong 

IF
ELSE 
END_IF 
PRINT 
INT 
BEGIN 
END 
FOREACH, IN
ULONG 

#Comentarios bien y mal definidos. 
	#Se espera que se elimine el comentario bien definido y que se reconozcan como tokens
	# las palabras del mal definido

  #Comentario bien definido

  comentario mal definido


# Cadenas bien y mal definidas.
	#Se espera que guarde el mensaje de la cadena bien definida en la TdeS y que genere un 
	# error por la cadena mal definida.
{
	cadena bien definida < > , ; ? &@!
}

#Se espera que almacene una unica vez en la TdeS los tokens a y b. 

a + b 
a - b 
a : b 
a < b
a <= b
a > b
a >= b
a == b 
a <> b
()
,
;
[]

#Comprobacion de case sensitive
MiVariable
mivariable

{ cadena mal definida % # _  