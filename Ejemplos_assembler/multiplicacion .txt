int a, b;
ulong c;
int d[1,2,3];

begin

	#ANDAN
		
		#16 bits
		a:=5*2;#CONST-CONST(16 bits)
		b:=6;
		a:=2;
		a:=a*a; #VAR-VAR (16 bits)
		a:=b*b; #VAR-VAR (16 bits)
		a:=b*6; #VAR-CONST (16 bits)
		a:=6*b; #CONST-VAR (16 bits)
		a:= 3*2*3; #CONST-REG (en el reg esta almacenado 2*3)
		a:= a*2*2; #VAR-REG
		a:=a*b*b; # multiplica "a" con REG (VAR-REG) (16 bits)
		a:=d[0]*2; #REFMEM-CONST
		a:=2*d[0]; #CONST-REFMEM
		a:=d[0]*d[0]; #REFMEM-REFMEM
		a:=d[0]*a; #REFMEM-VAR
		a:=a*d[0]; #VAR-REFMEM
		a:=d[0]*2*3; #RM-REG

		#32 bits

		c:=32768*to_ulong(2); #caso (CONST-REG) 32 bits
		c:=to_ulong(2)*32768; #REG-CONST
		c:=to_ulong(2)*c; #REG-VAR 
		c:=c*to_ulong(2); #VAR-REG
		c:=c*c; #VAR-VAR
		c:=32768*32768; #CONST-CONST
		c:=32768*c; #CONST-VAR
		c:=c*32768; #VAR-CONST
		c:=d[0]*d[0]; #RM-RM
		c:=d[0]*32768; #RM-CONST
		c:=d[0]*w; #RM-VAR
		c:=32768*d[0]; #CONST-RM
		c:=w*d[0]; #VAR-RM

		c:=to_ulong(3)*to_ulong(2); #caso (REG-REG) 32 bits
		c:=to_ulong(3)*to_ulong(2)*to_ulong(8); #otro caso (REG-REG)
		c:=d[0]*to_ulong(6); #RM-REG
		c:=to_ulong(6)*d[0]; #REG-RM

end