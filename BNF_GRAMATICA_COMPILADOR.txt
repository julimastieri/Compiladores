<programa> -> <sentencias_declarativas><sentencias_ejecutables>

------------------------------------------------------------------------------------------------------------------
<sentencias_declarativas> -> <tipo><lista_de_variables>; | <tipo><nombre_coleccion>[<tamaño>]; | 
<tipo><nombre_coleccion>[<lista_de_valores_iniciales>];

<tipo> -> int|ulong

<lista_de_variables> -> <nombre_variable> | <nombre_variable>,<lista_de_variables>

<nombre_variable> -> <id>

<nombre_coleccion> -> <id>

<tamaño> -> <cte>

<lista_de_valores_iniciales> -> <cte>| _ | <cte>,<lista_de_valores_iniciales> | _,<lista_de_valores_iniciales>

------------------------------------------------------------------------------------------------------------------
<sentencias_ejecutables> -> begin<bloque_de_sentencias>end

<bloque_de_sentencias> -> <sentencia_ejecutable> | begin<lista_de_sentencias>end

<lista_de_sentencias> -> <sentencia_ejecutable> | <sentencia_ejecutable><lista_de_sentencias>

<sentencia_ejecutable> -> <sentencia_if> | <sentencia_foreach> | <sentencia_print> | <asignacion>

<sentencia_if> -> if(<condicion>)<bloque_de_sentencias>end_if | if(<condicion>)<bloque_de_sentencias>else<bloque_de_sentencias>end_if

<condicion> -> <expresion><comparador><expresion> | <conversion>(<expresion>)<comparador><conversion>(<expresion>) | 
<expresion><comparador><conversion>(<expresion>) | <conversion>(<expresion>)<comparador><expresion>

<comparador> -> >= | <= | > | < | == | <>

<sentencia_foreach> -> foreach<nombre_variable>in<nombre_coleccion><bloque_de_sentencias>;

<sentencia_print> -> print({<cadena>});

<expresion> -> <termino>+<expresion> | <termino>-<expresion> | <termino>

<termino> -> <factor>*<termino> | <factor>/<termino> | <factor>

<factor> -> <nombre_variable> | <cte> | <nombre_coleccion>[<subindice>]

<subindice> -> <id> | <cte>

<asignacion> -> <nombre_variable>:=<expresion>; | <nombre_variable>:=<conversion>(<expresion>);

<conversion> -> to_ulong



------------------------------------------------------------------------------------------------------------------
CONSULTAS

-¿Se entrega BNF?

-En tp diferencian entre <nombre_coleccion> y <nombre_variable>, pero ambas son <id>, ¿puedo poner directamente <id>?

-Bloque de sentencias, si hay 1 sola sentencia puede ir sin BEGIN END, ¿no?

-Tengo que definir <id>, <cte> y <cadena>. Caso afirmativo, ¿de que forma? ¿en el caso de cte tengo en cuenta + y -?

-Tengo que diferenciar entre ctes + y -, o agrupo todo dentro de <cte>? 

-En lugar de <tamaño>, ¿puedo poner directamente <cte>?

-hago "<cadena> -> {<cadena_carac>}" o como se usa solo en el print hago "<sentencia_print> -> print({<cadena>});"

-En una misma linea, ¿se pueden declarar varias colecciones?

-Tp dice: NO SE PERMITEN ANIDAMIENTOS DE EXPRESIONES CON PARENTESIS, entonces, ¿no tengo en cuenta + o - entre () al def <expresion>?

-Tp dice:
Se debe incorporar, en todo lugar donde pueda aparecer una expresión, la siguiente sintaxis: <conversion>(<expresión>). 
¿Dentro de una suma puede existir una conversion? ¿defino <conversion> o pongo directamente to_ulong?
//////<expresion_convertida> -> <expresion> | <conversion>(<expresion>)
